/**
 * Задача 2.
 *
 * Напишите функцию calculate(), которая в качестве аргументов принимает неограниченное количество функций.
 * 
 * При запуске calculate() последовательно запускает коллбек-функции из аргументов.
 * Каждая коллбек-функция из цепочки в качестве своего аргумента принимает то, что возвращает предыдущая коллбек-функция.
 * То есть возвращаемое значение каждой коллбек-функции из цепочки
 * становится доступным из параметра следующей коллбек-функции в цепочке.
 * 
 * Первая коллбек-функция не принимает параметров.
 * 
 * После выполнения всей цепочки, функция calculate() должна вернуть результат выполнения последней коллбек-функции.
 *
 * Генерировать ошибки если:
 * - Любой из аргументов функции calculate() не является функцией;
 * - Любая функция из аргументов не вернула значение.
 */

// Решение
function calculate(...param){
    let i = -1;
    let res = null;//теперь даже если в первую ф-ию передать параметр, то он проигнорируется 
    function callback(result){
        i++;
        result = param[i](result);
        if(typeof param[i] !== 'function'){
            throw new Error(`Элемент №${i+1} не является функцией.`);
        }
        if(typeof result === 'undefined'){
            throw new Error(`Фунция №${i+1} не вернула значение.`);
        }
        return i < param.length - 1 ? callback(result) : result; 
    }
    return callback(res);
}

const result = calculate(
    () => {
        return 7;
    },
    prevResult => {
        return prevResult + 4;
    },
    prevResult => {
        return prevResult * 5;
    }
);

console.log(result); // 55

exports.calculate = calculate;
